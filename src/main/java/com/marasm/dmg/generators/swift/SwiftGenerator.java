package com.marasm.dmg.generators.swift;

import com.marasm.dmg.*;
import com.marasm.dmg.generators.swift.CouchDBGenerator;

import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Collection;

/**
 * Created by vhq473 on 01.09.2016.
 */
public class SwiftGenerator implements Generator
{
    private String file_header = "///////////////////////////////////////////\n"+
                                 "//                                       //\n"+
                                 "// Code generated by DMG Swift Generator //\n"+
                                 "// https://github.com/marasm-group/dmg   //\n"+
                                 "//                                       //\n"+
                                 "///////////////////////////////////////////\n"+
                                 "import Foundation\n";
    String result = "";


    public String tmp_arr = "TMP_ARRAY";
    public String tmp_obj = "TMP_OBJ";
    public String tmp_json_obj = "TMP_JSON_OBJ";


    boolean to_json = false;
    boolean from_json = false;
    private boolean couchdb = false;
    private String str;

    void append(String str)
    {
        result += str+"\n";
    }
    public void generate(DMGObject object)
    {
        String classStr = "public class "+Configuration.classname(object.name) +": Equatable";
        if(to_json)
        {
            classStr += ", CustomStringConvertible, CustomDebugStringConvertible";
        }
        append(classStr);
        append("{");
        for (Field f: object.fields)
        {
            append("public var "+f.name+": "+type(f,f.isArray)+"?");
        }
        append("static func Log(o:Any?){NSLog(\"\\("+Configuration.classname(object.name)+".self): \\(o)\")}");
        append("public init(){}");
        if(from_json)
        {
            append("//MARK: JSON deserialization");
            String tmp1 = "{\n"+
                          "guard let data = jsonString.dataUsingEncoding(NSUTF8StringEncoding) else {return nil}\n"+
                          "do{\n"+
                          "if let json = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions()) as? [String: AnyObject]\n{";
            String tmp2 = "else {return nil}\n"+
                          "} catch {\n"+
                          ""+Configuration.classname(object.name)+".Log(error)\n"+
                          "return nil\n"+
                          "}\n}";
            append("public convenience init?(jsonString: String)");
            append(tmp1);
            append("self.init(jsonDictionary: json)\n}");
            append(tmp2);
            append("public convenience init(jsonDictionary json: [String: AnyObject])\n{");
            append("self.init()");
            for (Field f : object.fields)
            {
                if(f.object != null && f.isArray)
                {
                    append("if let "+tmp_arr+" = json[\""+f.name+"\"] as? [AnyObject]\n" +
                           "{\n" +
                           "self."+f.name+" = ["+Configuration.classname(f.name)+"]()\n" +
                           "for "+tmp_json_obj+" in "+tmp_arr+"\n" +
                           "{\n" +
                           "if let "+tmp_json_obj+" = "+tmp_json_obj+" as?[String : AnyObject]\n" +
                           "{\n" +
                           "self."+f.name+"?.append("+Configuration.classname(f.name)+"(jsonDictionary: "+tmp_json_obj+"))\n" +
                           "}\n" +
                           "}\n" +
                           "} else {\n" +
                           "self."+f.name+" = nil\n" +
                           "}");
                }
                else {
                    if (f.object != null)
                    {
                    append("if let " + tmp_obj + " = json[\"" + f.name + "\"] as?[String : AnyObject] {");
                        append("self." + f.name + " = " + type(f, f.isArray) + "(jsonDictionary: " + tmp_obj + ")");
                    }else{
                        append("if let " + tmp_obj + " = json[\"" + f.name + "\"] as?" + type(f, f.isArray) + "{");
                        append("self." + f.name + " = " + tmp_obj + "");
                    }
                    append("} else {");
                    append("self." + f.name + " = nil");
                    append("}");
                }
            }
            append("}");
        }
        if(to_json)
        {
            append("//MARK: JSON serialization");
            append("public var jsonDictionary : [String:AnyObject]\n"+
                   "{\n");
            append("var "+tmp_json_obj+" = [String:AnyObject]()");
            boolean arrayCreated = false;
            for (Field f : object.fields)
            {
                if (f.object != null)
                {
                    if(f.isArray)
                    {
                        if(arrayCreated)
                        {
                            append("" + tmp_arr + " = [AnyObject]()");
                        }
                        else
                        {
                            append("var " + tmp_arr + " = [AnyObject]()");
                            arrayCreated = true;
                        }
                        append("        for "+tmp_obj+" in self."+f.name+" ?? [] {\n" +
                               "            "+tmp_arr+".append("+tmp_obj+".jsonDictionary)\n" +
                               "        }\n" +
                               "        TMP_JSON_OBJ[\""+f.name+"\"] = "+tmp_arr);
                    }
                    else
                    {
                        append("if let "+tmp_obj+" = self."+f.name+"?.jsonDictionary{");
                        append(tmp_json_obj+"[\""+f.name+"\"] = "+tmp_obj+"");
                        append("}");
                    }
                }
                else
                {
                    append("if let "+tmp_obj+" = self."+f.name+"{");
                    append(tmp_json_obj+"[\""+f.name+"\"] = "+tmp_obj+"");
                    append("}");
                }
            }
            append("return "+tmp_json_obj);
            append("}");
            append("public var jsonPrettyString : String?\n"+
                    "{\n"+
                    "do{\n"+
                    "let data = try NSJSONSerialization.dataWithJSONObject(jsonDictionary, options: .PrettyPrinted)\n"+
                    "return String(data: data,encoding: NSUTF8StringEncoding)\n"+
                    "} catch let e {"+Configuration.classname(object.name)+".Log(e)}\n"+
                    "return nil\n"+
                    "}\n"+
                    "public var jsonString : String?\n"+
                    "{\n"+
                    "do{\n"+
                    "let data = try NSJSONSerialization.dataWithJSONObject(jsonDictionary, options: NSJSONWritingOptions(rawValue: 0))\n"+
                    "return String(data: data,encoding: NSUTF8StringEncoding)\n"+
                    "} catch let e {"+Configuration.classname(object.name)+".Log(e)}\n"+
                    "return nil\n"+
                    "}");
            append("//MARK: CustomStringConvertible, CustomDebugStringConvertible");
            append("public var debugDescription : String {return self.jsonPrettyString ?? \"<ERROR>\"}");
            append("public var description : String {return self.jsonString ?? \"<ERROR>\"}");
        }
        if(couchdb)
        {
            append("//MARK: CouchDB");
            new CouchDBGenerator(this).generateObject(object);
        }
        append("//MARK: Equality");
        append("func isEqual(o : "+Configuration.classname(object.name)+"?) -> Bool{");
        append("guard let o = o else {return false}");
        for (Field f:object.fields)
        {
            if(f.isArray)
            {
                String tmpa1 = tmp_arr+"_1";
                String tmpa2 = tmp_arr+"_2";
                String tmp1 = tmp_obj+"_1";
                String tmp2 = tmp_obj+"_2";
                append("if let "+tmpa1+" = self."+f.name+"{");
                append("if let "+tmpa2+" = o."+f.name+"{");
                append("if "+tmpa1+".count != "+tmpa2+".count {return false}");
                append("for i in 0..<"+tmpa1+".count{");
                append("let "+tmp1+" = "+tmpa1+"[i]");
                append("let "+tmp2+" = "+tmpa2+"[i]");
                if (f.object != null) {
                    append("if !(" + tmp1 + ".isEqual(" + tmp2+ ") ?? false){return false}");
                } else {
                    append("if " + tmp1 + " != " + tmp2 + "{return false}");
                }
                append("}");// for
                append("}");// tmpa2 ("o."+f.name != nil)
                append("else{");
                append("return false");
                append("}");// ("o."+f.name == nil)
                append("}");// tmpa1 ("self."+f.name != nil)
                append("else{");
                append("if o."+f.name+" != nil{");
                append("return false\n}");
                append("}");// ("self."+f.name == nil)
            }
            else {
                if (f.object != null) {
                    String tmp1 = tmp_obj+"_1";
                    String tmp2 = tmp_obj+"_2";
                    append("if let "+tmp1+" = self."+f.name+"{");
                    append("if let "+tmp2+" = o."+f.name+"{");
                    append("if !" + tmp1 + ".isEqual(" + tmp2 + "){return false}");
                    append("}");//tmp2 ("o."+f.name)
                    append("else{return false}");//"o."+f.name == nil
                    append("}");//tmp1 ("self."+f.name)
                    append("else{");
                    append("if o."+f.name+" != nil {return false}");
                    append("}");//"self."+f.name == nil
                } else {
                    append("if self." + f.name + " != o." + f.name + "{return false}");
                }
            }
        }
        append("return true");
        append("}");
        append("\n}//"+object.name);
        append("//MARK: Equatable");
        append("public func ==(lhs: "+Configuration.classname(object.name)+", rhs: "+Configuration.classname(object.name)+") -> Bool {\n" +
               "    return lhs.isEqual(rhs)\n" +
               "}\n" +
               "public func !=(lhs: "+Configuration.classname(object.name)+", rhs: "+Configuration.classname(object.name)+") -> Bool {\n" +
               "    return !lhs.isEqual(rhs)\n" +
               "}");
        for (Field f: object.fields)
        {
            if (f.type ==  Type.Object)
            {
                generate(f.object);
            }
        }
    }
    public void generate(ArrayList<DMGObject> objects)
    {
        for (DMGObject obj : objects)
        {
            generate(obj);
        }
    }

    public String type(Field f)
    {
        return type(f,false);
    }
    public String type(Field f, boolean array)
    {
        String res = "";
        switch (f.type)
        {
            case Object:
                res = Configuration.classname(f.object.name);
                break;
            case String:
                res = "String";
                break;
            case Int:
                res = "Int";
                break;
            case Real:
                res = "Double";
                break;
            case Number:
                res = "NSNumber";
                break;
            case Bool:
                res = "Bool";
                break;
            default:
                res = "ERROR_TYPE";
                break;
        }
        if(array)
        {
            res = "["+ res + "]";
        }
        return res;
    }

    public void enableFeatures(Collection<Feature> features)
    {
        for (Feature f : features)
        {
            switch (f)
            {
                case from_json:
                    this.from_json = true;
                    break;
                case to_json:
                    this.to_json = true;
                    break;
                case couchdb:
                    this.couchdb = true;
                    break;
                default:
                    Log.e(this,"Feature "+f+" is unsupported!");
                    System.exit(-1);
            }
        }
    }
    public void disableFeatures(Collection<Feature> features)
    {
        for (Feature f : features)
        {
            switch (f)
            {
                case from_json:
                    this.from_json = false;
                    break;
                case to_json:
                    this.to_json = false;
                    break;
                case couchdb:
                    this.couchdb = false;
                    break;
                default:
                    Log.e(this,"Feature "+f+" is unsupported!");
                    break;
            }
        }
    }

    public void beginGeneration()
    {
        if(couchdb)
        {
            file_header += new CouchDBGenerator(this).header;
        }
        file_header+="// DMG version: "+Utils.getVersion()+"\n";
        append(file_header);
    }

    public void endGeneration(OutputStream stream) throws IOException
    {
        stream.write(result.getBytes());
    }
}
