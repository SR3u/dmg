package com.marasm.dmg.generators.csharp;

import com.marasm.dmg.*;

import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Collection;

/**
 * Created by vhq473 on 29.08.2016.
 */
public class CSharpGenerator implements Generator
{
    private String file_header = "/////////////////////////////////////////\n"+
                                 "//                                     //\n"+
                                 "// Code generated by DMG C# Generator  //\n"+
                                 "// https://github.com/marasm-group/dmg //\n"+
                                 "//                                     //\n"+
                                 "/////////////////////////////////////////\n";
    String result = "";
    private boolean from_json = false;
    private boolean to_json = false;

    String tmp_object = "TMP_OBJ";
    String tmp_json_array = "TMP_JSON_ARRAY";

    void append(String str)
    {
        result += str+"\n";
    }

    void generateObject(DMGObject o)
    {
        append("class "+Configuration.classname(o.name)+"\n{");
        for (Field f : o.fields)
        {
            generateField(f);
        }
        generateMethods(o);
        append("\n}\n");
        for (Field f : o.fields)
        {
            if (f.object != null)
            {
                generateObject(f.object);
            }
        }
    }
    private void generateField(Field f)
    {
        String str = type(f);
        if (f.isArray)
        {
            str += "[]";
        }
        str += " "+f.name+";\n";
        append(str);
    }

    private void generateMethods(DMGObject o)
    {
        if(from_json)
        {
            append("public static "+Configuration.classname(o.name)+" fromJSON(String jsonStr)\n{");
            append("JsonObject obj = JsonValue.Parse(jsonStr).GetObject();");
            append("return fromJSON(json);");
            append("}");
            append("public static "+Configuration.classname(o.name)+" fromJSON(JsonObject json)\n{");
            append(Configuration.classname(o.name)+" "+tmp_object+" = new "+Configuration.classname(o.name)+"();");
            for (Field f:o.fields)
            {
                if(f.isArray)
                {
                    append("JsonArray +"+tmp_json_array+" = jsonGetNamedArray(\""+f.name+"\");");
                    append(tmp_object+"."+f.name+" = new "+type(f,true)+"["+tmp_json_array+".Size];");
                    append("for(uint i=0;i<"+tmp_json_array+".Size;i++)\n{");
                    switch (f.type)
                    {
                        case Object:
                            append(tmp_object+"."+f.name+"[i] = "+Configuration.classname(f.name)+".fromJSON("+tmp_json_array+".GetStringAt(i));");
                            break;
                        case String:
                            append(tmp_object+"."+f.name+"[i] = "+tmp_json_array+".GetStringAt(i);");
                            break;
                        case Int:
                            append(tmp_object+"."+f.name+"[i] = "+tmp_json_array+".GetNumberAt(i);");
                            break;
                        case Real:
                            append(tmp_object+"."+f.name+"[i] = "+tmp_json_array+".GetNumberAt(i);");
                            break;
                        case Bool:
                            append(tmp_object+"."+f.name+"[i] = "+tmp_json_array+".GetBooleanAt(i);");
                            break;
                        case Number:
                            //TODO
                            Log.e(this,"Number is not supported");
                            //append(tmp_object+"."+f.name+"[i] = "+tmp_json_array+".GetNumberAt(i);");
                            System.exit(-1);
                            break;
                        default:
                            Log.e(this,"invalid type '"+f.type+"'");
                            break;
                    }
                    append("}");
                }
                else
                {
                    switch (f.type)
                    {
                        case Object:
                            append(tmp_object+"."+f.name+" = "+Configuration.classname(f.name)+".fromJSON(json.GetNamedObject(\""+f.name+"\"));");
                            break;
                        case String:
                            append(tmp_object+"."+f.name+" = json.GetNamedString(\""+f.name+"\");");
                            break;
                        case Int:
                            append(tmp_object+"."+f.name+" = json.GetNamedNumber(\""+f.name+"\");");
                            break;
                        case Real:
                            append(tmp_object+"."+f.name+" = json.GetNamedNumber(\""+f.name+"\");");
                            break;
                        case Bool:
                            append(tmp_object+"."+f.name+" = json.GetNamedBoolean(\""+f.name+"\");");
                            break;
                        case Number:
                            //TODO
                            Log.e(this,"Number is not supported");
                            //append(tmp_object+"."+f.name+" = json.GetNamedNumber(\""+f.name+"\");");
                            System.exit(-1);
                            break;
                        default:
                            Log.e(this,"invalid type '"+f.type+"'");
                            break;
                    }
                }
            }
            append("return "+tmp_object+";");
            append("}");
        }
    }

    @Override
    public void generate(ArrayList<DMGObject> objectList)
    {
        for (DMGObject object : objectList)
        {
            this.generateObject(object);
        }
    }

    @Override
    public void enableFeatures(Collection<Feature> features)
    {
        for (Feature f : features)
        {
            switch (f)
            {
                case from_json:
                    this.from_json = true;
                    break;
                /*case to_json:
                    this.to_json = true;
                    break;*/
                default:
                    Log.e(this,"Feature "+f+" is unsupported!");
                    System.exit(-1);
            }
        }
    }

    @Override
    public void disableFeatures(Collection<Feature> features)
    {
        for (Feature f : features)
        {
            switch (f)
            {
                case from_json:
                    this.from_json = false;
                    break;
                /*case to_json:
                    this.to_json = false;
                    break;*/
                default:
                    Log.e(this,"Feature "+f+" is unsupported!");
                    break;
            }
        }
    }

    @Override
    public void beginGeneration()
    {
        append(file_header);
        if(from_json || to_json)
        {
            append("using System.Json;");
        }
    }

    @Override
    public void endGeneration(OutputStream stream) throws IOException
    {
        stream.write(result.getBytes());
    }

    public String type(Field f)
    {
        return type(f,false);
    }
    public String type(Field f, boolean array)
    {
        switch (f.type)
        {
            case Object:
                return Configuration.classname(f.object.name);
            case String:
                return "String";
            case Int:
                return "int";
            case Real:
                return "double";
            case Number:
                Log.e(this,"Number is not supported");
                System.exit(-1);
                return "NUMBER_TYPE";
            case Bool:
                return "bool";
            default:
                return "ERROR_TYPE";
        }
    }
}
