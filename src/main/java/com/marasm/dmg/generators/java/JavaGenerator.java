package com.marasm.dmg.generators.java;

import com.marasm.dmg.*;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Collection;

/**
 * Created by vhq473 on 23.08.2016.
 */
public class JavaGenerator implements Generator
{
    private String file_header = "/////////////////////////////////////////\n"+
                                 "//                                     //\n"+
                                 "// Code generated by DMG JavaGenerator //\n"+
                                 "// https://github.com/marasm-group/dmg //\n"+
                                 "//                                     //\n"+
                                 "/////////////////////////////////////////\n";
    String result = "";


    public String tmp_arr = "TMP_ARRAY";
    public String tmp_obj = "TMP_OBJ";
    public String tmp_json_obj = "TMP_JSON_OBJ";

    public String arrayType = "ArrayList";

    boolean to_json = false;
    boolean from_json = false;
    private boolean couchdb = false;

    void append(String str)
    {
        result += str+"\n";
    }
    public void generate(DMGObject object)
    {
        append("class "+capitalizeFirst(object.name)+"\n{");
        for (Field f: object.fields)
        {
            if (f.isArray)
            {
                append(arrayType+"<"+type(f,true)+"> "+f.name+";");
            }
            else
            {
                append(type(f)+" "+f.name+";");
            }
        }
        if(from_json)
        {
            append("void fillWithJSON(String jsonStr)\n" +
                    "{\n" +
                    "JSONObject json = new JSONObject(jsonStr);\n" +
                    "fillWithJSON(json);\n" +
                    "}\n" +
                    "void fillWithJSON(JSONObject json)\n{");
            for (Field f: object.fields)
            {
                if (f.isArray)
                {
                    from_json_processFieldArray(f);
                }
                else
                {
                    from_json_processField(f);
                }
            }
            append("\n}//fillWithJSON");
        }
        if(to_json)
        {
            append("String jsonString()\n" +
                    "{\n" +
                    "return this.jsonValue().toString();\n" +
                    "}\n" +
                    "JSONObject jsonValue()\n{\n" +
                    "JSONObject "+tmp_json_obj+" = new JSONObject();");
            for (Field f: object.fields)
            {
                if (f.isArray)
                {
                    to_json_processFieldArray(f);
                }
                else
                {
                    to_json_processField(f);
                }
            }
            append("return "+tmp_json_obj+";");
            append("\n}//jsonValue");
        }
        if(couchdb)
        {
            CouchDBGenerator g = new CouchDBGenerator(this);
            g.generateObject(object);
        }
        append("\n}//"+object.name);
        for (Field f: object.fields)
        {
            if (f.type ==  Type.Object)
            {
                generate(f.object);
            }
        }
    }
    void from_json_processFieldArray(Field f)
    {
        append(f.name+" = new "+arrayType+"<"+type(f,true)+">();");
        append("try{");
        append("JSONArray "+tmp_arr+" = json.getJSONArray(\"" + f.name + "\");");
        append("for (int i = 0; i< "+tmp_arr+".length();i++)\n{");
        switch (f.type)
        {
            case Object:
                append(type(f)+" "+tmp_obj+" = new "+type(f)+"();");
                append(tmp_obj+".fillWithJSON("+tmp_arr+".getJSONObject(i));");
                append(f.name+".add("+tmp_obj+");");
                break;
            case String:
                append("this."+f.name+".add("+tmp_arr+".getString(i));");
                break;
            case Int:
                append("this."+f.name+".add("+tmp_arr+".getInt(i));");
                break;
            case Real:
                append("this."+f.name+".add("+tmp_arr+".getDouble(i));");
                break;
            case Bool:
                append("this."+f.name+".add("+tmp_arr+".getBoolean(i));");
                break;
            case Number:
                append("this."+f.name+".add("+tmp_arr+".getBigDecimal(i));");
                break;
            default:
                Log.e(this,"invalid type '"+f.type+"'");
                break;
        }
        append("}");
        append("}catch (Exception t) {t.printStackTrace();}");
    }
    void to_json_processFieldArray(Field f)
    {
        append(f.name+" = new "+arrayType+"<"+type(f,true)+">();");
        append("try{");
        append("JSONArray "+tmp_arr+" = new JSONArray();");
        append("for (int i = 0; i< "+f.name+".size();i++)\n{\n");
        switch (f.type)
        {
            case Object:
                append("JSONObject "+tmp_obj+" = "+f.name+".get(i).jsonValue();");
                append(tmp_arr+".put("+tmp_obj+");");
                break;
            case String:
            case Int:
            case Real:
            case Bool:
            case Number:
                append(tmp_arr+".put("+f.name+");");
                break;
            default:
                Log.e(this,"invalid type '"+f.type+"'");
                break;
        }
        append(tmp_json_obj+".put(\""+f.name+"\","+tmp_arr+");");
        append("}");
        append("}catch (Exception t) {t.printStackTrace();}");
    }
    void from_json_processField(Field f)
    {
        append("try{");
        switch (f.type)
        {
            case Object:

                append("this."+f.name+" = new "+type(f)+"();");
                append("this."+f.name+".fillWithJSON(json.getJSONObject(\""+f.name+"\"));");
                break;
            case String:
                append("this."+f.name+" = json.getString(\""+f.name+"\");");
                break;
            case Int:
                append("this."+f.name+" = json.getInt(\""+f.name+"\");");
                break;
            case Real:
                append("this."+f.name+" = json.getDouble(\""+f.name+"\");");
                break;
            case Bool:
                append("this."+f.name+" = json.getBoolean(\""+f.name+"\");");
                break;
            case Number:
                append("this."+f.name+" = json.getBigDecimal(\""+f.name+"\");");
                break;
            default:
                Log.e(this,"invalid type '"+f.type+"'");
                break;
        }
        append("}catch (Exception t) {t.printStackTrace();}");
    }
    void to_json_processField(Field f)
    {
        append("try{");
        switch (f.type)
        {
            case Object:
                append("JSONObject "+tmp_obj+" = "+f.name+".jsonValue();");
                append(tmp_json_obj+".put(\""+f.name+"\","+tmp_obj+");");
                break;
            case String:
            case Int:
            case Real:
            case Bool:
            case Number:
                append(tmp_json_obj+".put(\""+f.name+"\","+f.name+");");
                break;
            default:
                Log.e(this,"invalid type '"+f.type+"'");
                break;
        }
        append("}catch (Exception t) {t.printStackTrace();}");
    }
    public void generate(ArrayList<DMGObject> objects)
    {
        for (DMGObject obj : objects)
        {
            generate(obj);
        }
    }

    public String type(Field f)
    {
        return type(f,false);
    }
    public String type(Field f, boolean array)
    {
        switch (f.type)
        {
            case Object:
                return capitalizeFirst(f.object.name);
            case String:
                return "String";
            case Int:
                if (array)
                {
                    return "Integer";
                }
                return "int";
            case Real:
                if (array)
                {
                    return "Double";
                }
                return "double";
            case Number:
                return "BigDecimal";
            case Bool:
                return "boolean";
            default:
                return "ERROR_TYPE";
        }
    }

    public String capitalizeFirst(String str)
    {
        return str.substring(0, 1).toUpperCase() + str.substring(1);
    }

    public void enableFeatures(Collection<Feature> features)
    {
        for (Feature f : features)
        {
            switch (f)
            {
                case from_json:
                    this.from_json = true;
                    break;
                case to_json:
                    this.to_json = true;
                    break;
                case couchdb:
                    this.couchdb = true;
                    this.from_json = true;
                    this.to_json = true;
                    break;
                default:
                    Log.e(this,"Feature "+f+" is unsupported!");
                    System.exit(-1);
            }
        }
    }
    public void disableFeatures(Collection<Feature> features)
    {
        for (Feature f : features)
        {
            switch (f)
            {
                case from_json:
                    this.from_json = false;
                    break;
                case to_json:
                    this.to_json = false;
                    break;
                case couchdb:
                    this.couchdb = false;
                    break;
                default:
                    Log.e(this,"Feature "+f+" is unsupported!");
                    break;
            }
        }
    }

    public void beginGeneration()
    {
        file_header+="// DMG version: "+Utils.getVersion()+"\n";
        if (to_json || from_json)
        {
            file_header+="// JSON serialization/deserializatin library: \n";
            file_header+="import org.json.*;// Maven: org.json:json:20160810\n";
        }
        append(file_header);
    }

    public void endGeneration(OutputStream stream) throws IOException
    {
        stream.write(result.getBytes());
    }
    
}
